name: Build & Push Docker Images

on:
  push:
    branches:
      - '**'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Variables (BRANCH, SHA, TAG)
        id: vars
        run: |
          BRANCH=$(echo "${GITHUB_REF##*/}" | sed 's/\//-/g')
          SHA=$(git rev-parse --short HEAD)
          if [ "$BRANCH" = "main" ]; then
            TAG=latest
          elif [ "$BRANCH" = "hosting" ]; then
            TAG=stable
          elif [ "$BRANCH" = "dev" ]; then
            TAG=beta
          else
            TAG=dev-${BRANCH}-${SHA}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Execution Permissions for Maven Wrapper
        run: chmod +x ./backend/mvnw

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # Use the OpenJDK distribution

  maven-build:
    runs-on: ubuntu-latest
    steps:
      - name: Replace placeholders in application.yml
        run: |
          envsubst < backend/src/main/resources/application-template.yml > backend/src/main/resources/application.yml
          echo "DB_URL=${{ vars.DB_URL }}" >> $GITHUB_OUTPUT
          echo "SERVER_URL=${{ vars.SERVER_URL }}" >> $GITHUB_OUTPUT
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_OUTPUT
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> $GITHUB_OUTPUT
          echo "MAIL_ANSWER_TO=${{ secrets.MAIL_ANSWER_TO }}" >> $GITHUB_OUTPUT
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> $GITHUB_OUTPUT
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> $GITHUB_OUTPUT
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> $GITHUB_OUTPUT
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> $GITHUB_OUTPUT
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_OUTPUT
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_OUTPUT
          echo "AI_URL=${{ vars.AI_URL }}" >> $GITHUB_OUTPUT
          echo "AI_API_KEY=${{ secrets.AI_API_KEY }}" >> $GITHUB_OUTPUT
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_OUTPUT

        env:
          DB_URL: ${{ vars.DB_URL }}
          SERVER_URL: ${{ vars.SERVER_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          MAIL_ANSWER_TO: ${{ secrets.MAIL_ANSWER_TO }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASS: ${{ secrets.MAIL_PASS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          AI_URL: ${{ vars.AI_URL }}
          AI_API_KEY: ${{ secrets.AI_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Cache OWASP NVD Data
        uses: actions/cache@v3
        with:
          path: ~/.dependency-check/data
          key: nvd-cache-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Build Backend
        run: |
          ./backend/mvnw -f ./backend/pom.xml clean verify -Dnvd.api.key=${{ secrets.NVD_API_KEY }}
          docker build -t lesommer2019/trivify-backend:${{ steps.vars.outputs.tag }} ./backend

  docker-push:
    runs-on: ubuntu-latest
    steps:
      - name: Push Backend
        run: docker push lesommer2019/trivify-backend:${{ steps.vars.outputs.tag }}
